name: Deploy to Staging
run-name: ${{ github.actor }} is deploying to staging
on:
  pull_request:
    branches: [main]

jobs:
  # Dockerイメージのビルドとプッシュのジョブ
  build-and-push-docker-images:
    runs-on: ubuntu-22.04
    permissions:
      packages: write
      contents: read
      attestations: write
      id-token: write
    steps:
      # リポジトリからプルリクエストの最新コミットをチェックアウト
      - name: Check out the pull request HEAD commit
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      # Docker Hubにログイン
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.STG_DOCKER_HUB_USERNAME }}
          password: ${{ secrets.STG_DOCKER_HUB_ACCESS_TOKEN }}

      # メタデータを設定してDockerイメージのタグとラベルを抽出
      - name: Extract metadata for App
        id: meta-go-server
        uses: docker/metadata-action@v5
        with:
          images: artsa2/art-sa2-chat:go-server

      # Goサーバー用のDockerイメージをビルドしてプッシュ
      - name: Build and push Docker image App
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./infra/prod/app/Dockerfile
          push: true
          tags: artsa2/art-sa2-chat:go-server-latest
          labels: ${{ steps.meta-go-server.outputs.labels }}

  # ステージング環境へのデプロイジョブ
  deploy-to-production:
    runs-on: ubuntu-22.04
    needs: build-and-push-docker-images
    permissions:
      packages: write
      contents: read
      attestations: write
      id-token: write
    steps:
      # IP取得ライブラリをインストール
      - name: Public IP Install
        id: ip
        uses: haythem/public-ip@v1.3

      # AWS CLIをインストールする
      - name: AWS CLI install
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install --update
          aws --version

      # AWS CLIにキーを設定をする
      - name: AWS set Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.STG_AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.STG_AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-1

      - name: Deploy to Production
        run: |
          # SSHのセキュリティグループを開放する
          aws ec2 authorize-security-group-ingress --group-id ${{ secrets.STG_EC2_SECURITY_GROUP_ID }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32

          # SSH接続
          echo "${{ secrets.STG_PRIVATE_KEY }}" > private_key
          chmod 600 private_key

          ssh -oStrictHostKeyChecking=no ${{ secrets.STG_USER_NAME }}@${{ secrets.STG_HOST_NAME }} -i private_key << 'EOF'
            if [ -d ~/web/E-Commerce-Chat-Microservice ]; then
              cd ~/web/E-Commerce-Chat-Microservice

              # 起動中のコンテナを停止させる
              sudo docker stop $(sudo docker ps -q)
              sudo docker compose down

              # 未使用のイメージ、コンテナ、ネットワークを削除
              sudo docker system prune -af
              # 未使用のボリュームを削除(ただし、再署名を避けるため、e-commerce-chat-microservice_https-portal-dataは削除しない)
              sudo chmod +x ./bin/cleanup_volumes.sh
              sudo ./bin/cleanup_volumes.sh

              # 既存のリポジトリフォルダを削除
              sudo rm -rf ~/web/E-Commerce-Chat-Microservice
            fi

            # GitHubから新たにリポジトリをクローン
            cd ~/web
            git clone --branch ${{ github.head_ref }} git@github.com:recursion-backend-projects/E-Commerce-Chat-Microservice.git

            cd ./E-Commerce-Chat-Microservice

            # 環境ファイルを作成する
            touch .env
            echo "MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}" >> .env
            echo "PROD_RDS_USERNAME=${{ secrets.STG_RDS_USERNAME }}" >> .env
            echo "PROD_RDS_PASSWORD=${{ secrets.STG_RDS_PASSWORD }}" >> .env
            echo "PROD_RDS_HOSTNAME=${{ secrets.STG_RDS_HOSTNAME }}" >> .env
            echo "PROD_RDS_DB_NAME=${{ secrets.STG_RDS_DB_NAME }}" >> .env
            echo "JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}" >> .env
            echo "PORT=${{ secrets.PORT }}" >> .env

            # Docker Hubから最新のイメージをプルしてコンテナを起動する
            sudo docker compose -f compose.stg.yml up -d --pull always
          EOF
          rm -f private_key

          # SSHのセキュリティグループを閉じる
          aws ec2 revoke-security-group-ingress --group-id ${{ secrets.STG_EC2_SECURITY_GROUP_ID }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32
